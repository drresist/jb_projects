# Imports
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta

engine = create_engine('sqlite:///todo.db?check_same_thread=False')
Base = declarative_base()

# Create session
Session = sessionmaker(bind=engine)
session = Session()


# TODO: Implement week tasks


def add_task():
    new_task = input("Enter task\n")
    new_deadline = input("Enter deadline\n")
    new_row = Table(
        task=new_task,
        deadline=datetime.strptime(new_deadline, "%Y-%m-%d")
    )
    session.add(new_row)
    session.commit()
    print("The task has been added!")


def weeks_tasks():
    for i in range(7):
        date = datetime.today().date() + timedelta(days=i)
        list_tasks = session.query(Table).filter(Table.deadline == date).all()
        print(date.strftime("%A %d %b") + ":")
        if len(list_tasks) == 0:
            print("Nothing to do!")
        else:
            for j in range(len(list_tasks)):
                print(f'{j + 1}. {list_tasks[j].task}')
        print()


def today_task():
    print("Today " + datetime.today().strftime("%d %b") + ":")
    rows = session.query(Table).filter(
        Table.deadline == datetime.today().date()).all()
    if len(rows) == 0:
        print("Nothing to do!")
        return
    for i, row in enumerate(rows):
        print(
            f"{i + 1}. {row}"
        )


def all_tasks():
    list_tasks = session.query(Table.task, Table.deadline).order_by(Table.deadline).all()
    print('All tasks:')
    for i, task in enumerate(list_tasks):
        print(f'{i+1}. {task.task}. {task.deadline.strftime("%#d %b")}')

    print()


def missed_tasks():
    print("Missed tasks:")
    rows = session.query(Table).filter(Table.deadline < datetime.today().date()).all()
    for i, task in enumerate(rows):
        print(f'{i+1}. {task.task}. {task.deadline.strftime("%#d %b")}')


def delete_task():
    print("Choose the number of the task you want to delete:")
    rows = session.query(Table).order_by(Table.deadline).all()
    for i, task in enumerate(rows):
         print(f'{i+1}. {task.task}. {task.deadline.strftime("%#d %b")}')
    task_to_delete = input()
    session.delete(rows[task_to_delete-1])

    # Commit the changes
    session.commit()


class Table(Base):
    __tablename__ = 'task'
    id = Column(Integer, primary_key=True, autoincrement=True)
    task = Column(String)
    deadline = Column(Date, default=datetime.today())

    def __repr__(self):
        return self.task


Base.metadata.create_all(engine)

# Working with menu
while True:
    menu = input(
        """
1) Today's tasks
2) Week's tasks
3) All tasks
4) Missed tasks
5) Add task
6) Delete task
0) Exit

""")
    if menu == '0':
        print("Bye!") # Exit
        quit()
    elif menu == '1':
        today_task() # print today's task'
    elif menu == '2':
        weeks_tasks() # print weeks task
    elif menu == '3':
        all_tasks()  # print all tasks
    elif menu == '4':
        missed_tasks() # print missed tasks
    elif menu == '5':
        add_task() # add a new task
    elif menu == '6':
        delete_task() # delete a task
    else:
        print("Incorrect input")
